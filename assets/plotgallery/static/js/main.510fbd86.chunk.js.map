{"version":3,"sources":["serviceWorker.ts","index.tsx","App.tsx","Thumbnail.tsx","Plot.tsx"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","props","electron","process","type","eval","addPlot","plot","noSwitch","setState","state","plots","switchTo","length","index","switchToFunc","indexFunc","updateThumbnail","thumbnailURL","slice","thumbnail","copyListener","event","clipboardData","setData","encodeURI","preventDefault","nextPlot","previousPlot","firstPlot","lastPlot","_","deleteAllPlots","deletePlot","splice","deleteCurrentPlot","keyDownListener","isComposing","keyCode","zoomIn","zoomFactor","zoomOut","zoomReset","className","map","key","onClick","selected","onThumbnailUpdate","onInvalidPlot","e","alert","toString","addEventListener","this","removeEventListener","Component","Thumbnail","src","alt","Plot","vega","view","View","parse","data","initialize","width","height","toImageURL","console","warn","spec","onError","compile","plotData","JSON","Plotly","newPlot","createElement","layout","gd","toImage","format","style","config","responsive","transform","transformOrigin"],"mappings":"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","file":"static/js/main.510fbd86.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {Component} from 'react';\nimport Thumbnail from './Thumbnail'\nimport Plot from './Plot';\n\nimport './App.css';\n\nexport type PlotData = {\n  type: string,\n  data: any,\n  thumbnail: string | null,\n}\n\ntype AppState = {\n  plots: any[],\n  index: number,\n  zoomFactor: number,\n}\n\nexport class App extends Component<{}, AppState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      plots: [],\n      index: 0,\n      zoomFactor: 1,\n    };\n\n    // Expose whether we are using electron\n    (window as any).electron = this.electron;\n\n    // Expose functions\n    (window as any).addPlot = this.addPlot;\n    (window as any).switchTo = this.switchTo;\n    (window as any).previousPlot = this.previousPlot;\n    (window as any).nextPlot = this.nextPlot;\n    (window as any).firstPlot = this.firstPlot;\n    (window as any).lastPlot = this.lastPlot;\n    (window as any).deleteCurrentPlot = this.deleteCurrentPlot;\n    (window as any).deleteAllPlots = this.deleteAllPlots;\n    (window as any).zoomIn = this.zoomIn;\n    (window as any).zoomOut = this.zoomOut;\n    (window as any).zoomReset = this.zoomReset;\n  }\n\n  electron = (window.process && (window.process as any).type === 'renderer') ? eval('require')('electron') : null;\n\n  addPlot = (plot: PlotData, noSwitch: Boolean = false) => {\n    this.setState((state) => (\n      {\n        ...state,\n        plots: [...state.plots, plot],\n      }\n    ));\n    if (!noSwitch) {\n      this.switchTo(this.state.plots.length - 1);\n    }\n  }\n\n  switchTo = (index: number) => {\n    this.setState((state) => (\n      {\n        ...state,\n        index,\n      }\n    ));\n  }\n\n  switchToFunc = (indexFunc: (oldIndex: number, state: AppState) => number) => {\n    this.setState((state) => {\n        let index = indexFunc(state.index, state);\n        if (index < 0 || index > this.state.plots.length - 1) { // do not switch if it causes out of bounds\n          return state;\n        } else {\n          return {\n            ...state,\n            index,\n          };\n        }\n      }\n    );\n  }\n\n  updateThumbnail = (index:number, thumbnailURL:string) => {\n    this.setState((state) => {\n      let plots = this.state.plots.slice();\n      plots[index].thumbnail = thumbnailURL;\n      \n      return {\n        ...state,\n        plots: plots,\n      }\n    });\n  }\n\n  copyListener = (event: ClipboardEvent) => {\n    if (event.clipboardData) {\n      event.clipboardData.setData('text/html', '<img src=\"' + encodeURI(this.state.plots[this.state.index].thumbnail) + '\" />');\n    }\n    event.preventDefault();\n  };\n\n  nextPlot = () => {\n    this.switchToFunc((index) => (index + 1));\n  }\n\n  previousPlot = () => {\n    this.switchToFunc((index) => (index - 1));\n  }\n\n  firstPlot = () => {\n    this.switchTo(0);\n  }\n\n  lastPlot = () => {\n    this.switchToFunc((_, state) => (state.plots.length - 1));\n  }\n\n  deleteAllPlots = () => {\n    this.setState((state) => {\n      return {\n        ...state,\n        index: 0,\n        plots: [],\n      };\n    });\n  };\n\n  deletePlot = (index: number) => {\n    // we delete the invalid plot\n    this.setState((state) => {\n      let plots = state.plots.slice();\n      plots.splice(index, 1);\n      if (!plots[state.index]) {\n        if (plots.length === 0) {\n          index = 0;\n        } else {\n          index = plots.length - 1;\n        }\n      }\n      return {\n        ...state,\n        index,\n        plots,\n      };\n    });\n  };\n\n  deleteCurrentPlot = () => {\n    this.setState((state) => {\n      let plots = state.plots.slice();\n      let index = state.index;\n      plots.splice(state.index, 1);\n      if (!plots[state.index]) {\n        if (plots.length === 0) {\n          index = 0;\n        } else {\n          index = plots.length - 1;\n        }\n      }\n      return {\n        ...state,\n        index,\n        plots,\n      };\n    });\n  };\n\n  keyDownListener = (event: KeyboardEvent) => {\n    if (event.isComposing || event.keyCode === 229) {\n      return;\n    }\n    \n    if (event.keyCode === 40 || event.keyCode === 39) {\n      // arrow down/right\n      \n      // Note that we cannot call switchTo since we are getting old index and writing the index back\n      this.nextPlot()\n    } else if (event.keyCode === 38 || event.keyCode === 37) {\n      // arrow up/left\n      this.previousPlot();\n    } else if (event.keyCode === 36) {\n      // home\n      this.firstPlot();\n    } else if (event.keyCode === 35) {\n      // end\n      this.lastPlot();\n    } else if (event.keyCode === 8 || event.keyCode === 46) {\n      // backspace/delete\n      this.deleteCurrentPlot();\n    }\n  }\n\n  zoomIn = () => {\n    this.setState((state) => ({...state, zoomFactor: state.zoomFactor * 1.25}));\n  }\n\n  zoomOut = () => {\n    this.setState((state) => ({...state, zoomFactor: state.zoomFactor / 1.25}));\n  }\n\n  zoomReset = () => {\n    this.setState((state) => ({...state, zoomFactor: 1}));\n  }\n\n  componentDidMount() {\n    document.addEventListener('copy', this.copyListener);\n    document.addEventListener('keydown', this.keyDownListener);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('copy', this.copyListener);\n    document.removeEventListener('keydown', this.keyDownListener);\n  }\n\n  render = () => (\n    <div className=\"App\">\n      <div className=\"left-panel\">\n        {this.state.plots.map((_, index) => <Thumbnail key={index} index={index} thumbnailURL={this.state.plots[index].thumbnail} onClick={()=>{this.switchTo(index)}} selected={index===this.state.index} />)}\n      </div>\n      <div className=\"main-plot\">\n        <Plot\n          plot={this.state.plots[this.state.index] ? this.state.plots[this.state.index] : null}\n          onThumbnailUpdate={(thumbnailURL) => this.updateThumbnail(this.state.index, thumbnailURL)}\n          onInvalidPlot={(e: Error) => {\n            alert(\"We encountered the following error while displaying plot \" + (this.state.index + 1) + \": \" + e.toString());\n            this.deletePlot(this.state.index);\n          }}\n          zoomFactor={this.state.zoomFactor}\n        />\n      </div>\n    </div>\n  );\n\n}\n\nexport default App;","import React from 'react';\nimport './Thumbnail.css';\n\nexport type ThumbnailProps = {\n    index: number,\n    onClick: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void,\n    thumbnailURL: string | null,\n    selected: boolean,\n}\n\nconst Thumbnail = ({index, onClick, thumbnailURL, selected} : ThumbnailProps) => {\n  return (\n    <div className=\"Thumbnail\" onClick={onClick}>\n      <div className=\"column left\">{index + 1}</div>\n      <div className=\"column right\">\n        {thumbnailURL && <img src={thumbnailURL} className={selected ? \"thumbnail-image-selected\" : \"thumbnail-image\"} alt=\"\" />}\n      </div>\n    </div>\n  );\n}\n\nexport default Thumbnail;\n","import React from 'react';\n\nimport Plotly from 'plotly.js'\nimport PlotlyPlot from 'react-plotly.js';\nimport { Vega, VegaLite } from 'react-vega';\nimport { vega } from 'vega-embed';\nimport { compile, TopLevelSpec } from 'vega-lite';\nimport { PlotData } from './App';\nimport './Plot.css';\n\nexport type PlotProps = {\n    plot: PlotData | null,\n    onThumbnailUpdate: (thumbnailURL: string) => void,\n    onInvalidPlot: (e: Error) => void,\n    zoomFactor: Number,\n}\n\nconst Plot = ({plot, onThumbnailUpdate, onInvalidPlot, zoomFactor} : PlotProps) => {\n  if (plot) {\n    // For developers: comment/uncomment the code below to hide/expose vega\n    (window as any).vega = vega;\n    switch (plot.type) {\n      case \"vega\":\n        if (!plot.thumbnail) {\n          // render a thumbnail if there is no thumbnail in the plot object\n          try {\n            let view = new vega.View(vega.parse(plot.data)).initialize();\n            if ((view.width() as any) === \"container\" || (view.height() as any) === \"container\") { // The reason that we need to cast both return values to any is that although in function types they return a number, they do return string \"container\" in the case of \"container\" width/height\n              view.width(1000);\n              view.height(500);\n            }\n            view.toImageURL(\"png\").then(onThumbnailUpdate);\n          } catch (e) {\n            console.warn(\"Error generating thumbnail for a vega plot:\", e);\n          }\n        }\n        return (\n          <Vega spec={plot.data} className=\"vega-plot\" onError={onInvalidPlot} />\n        );\n      case \"vega-lite\":\n        if (!plot.thumbnail) {\n          try {\n            let view = new vega.View(vega.parse(compile(plot.data as TopLevelSpec).spec)).initialize();\n            if ((view.width() as any) === \"container\" || (view.height() as any) === \"container\") { // The reason that we need to cast both return values to any is that although in function types they return a number, they do return string \"container\" in the case of \"container\" width/height\n              view.width(1000);\n              view.height(500);\n            }\n            view.toImageURL(\"png\").then(onThumbnailUpdate);\n          } catch (e) {\n            console.warn(\"Error generating thumbnail for a vega-lite plot:\", e);\n          }\n        }\n        return (\n          <VegaLite spec={plot.data} className=\"vegalite-plot\" onError={onInvalidPlot} />\n        );\n      case \"plotly\":\n        let plotData = JSON.parse(plot.data);\n        \n        if (!plot.thumbnail) {\n          Plotly.newPlot(document.createElement('div'), plotData.data, plotData.layout).then(function(gd) {\n            Plotly.toImage(gd, {height: 500, width: 500, format: 'png'}).then(onThumbnailUpdate);\n          });\n        }\n\n        plotData.layout[\"autosize\"] = true;\n\n        return (<PlotlyPlot\n          style={{width: \"100%\", height: \"100%\"}}\n          data={plotData.data}\n          layout={plotData.layout}\n          config={{responsive: true}}\n        />);\n      case \"image\":\n        if (!plot.thumbnail) {\n          onThumbnailUpdate(plot.data.toString());\n        }\n        return <img src={plot.data} style={{transform: `scale(${zoomFactor})`, transformOrigin: \"top left\"}} alt=\"Plot\"></img>\n      default:\n        console.warn(\"Invalid plot type \" + plot.type + \" with data \" + plot.data.toString());\n        return <p>Unsupported plot type: {plot.type}</p>\n    }\n  }\n  return null;\n}\n\nexport default Plot;\n"],"sourceRoot":""}